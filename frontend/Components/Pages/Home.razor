@page "/"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Smart Finance - Annual Dashboard</PageTitle>

<div class="container">
    <h2>DashBoard</h2>

    <!-- Dropdown para selecionar o ano -->
    <div class="year-selector">
        <label for="yearDropdown">Selecione o Ano:</label>
        <select id="yearDropdown" @bind="SelectedYear" class="form-control">
            @foreach (var year in AvailableYears)
            {
                <option value="@year">@year</option>
            }
        </select>
    </div>

    <!-- Gráfico Donut -->
    <div class="chart-container" style="position: relative; width: 300px; float: right; margin-top: -100px;">
        <canvas id="donutChart"></canvas>
    </div>
</div>


@code {
    private bool _isInteractive = false;

    private int SelectedYear = 2024;
    private List<int> AvailableYears = new List<int> { 2024, 2025, 2026 };
    private decimal TotalDebt = 60000m;
    private decimal CurrentDebt = 20000m;
    private decimal PredictedDebtEndOfYear = 15000m;

    // Quando o ano é selecionado, podes atualizar as variáveis de dívida conforme o ano
    private void OnYearChanged(ChangeEventArgs e)
    {
        SelectedYear = int.Parse(e.Value.ToString());
        // Atualiza os valores de dívida conforme o ano selecionado
        UpdateDebtValues(SelectedYear);
        // RenderChart();
    }

    private void UpdateDebtValues(int year)
    {
        // Lógica para atualizar o valor da dívida conforme o ano
        if (year == 2024)
        {
            CurrentDebt = 20000m;
            PredictedDebtEndOfYear = 15000m;
        }
        else if (year == 2025)
        {
            CurrentDebt = 12000m;
            PredictedDebtEndOfYear = 8000m;
        }
        else if (year == 2026)
        {
            CurrentDebt = 5000m;
            PredictedDebtEndOfYear = 0m;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isInteractive = true;
            await JSRuntime.InvokeVoidAsync("renderDonutChart", TotalDebt, CurrentDebt, PredictedDebtEndOfYear);
        }
    }

}
