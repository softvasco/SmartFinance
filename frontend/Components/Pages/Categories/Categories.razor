@page "/categories"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Personal Management - Categories</PageTitle>
@* 
<br />
<br />
<h2>Expense categories</h2>
<br />

@if (categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var categoria in categories)
            {
                <tr>
                    <td>
                        @if (categoria.IsEditing)
                        {
                            <input @bind="categoria.Code" class="form-control" />
                        }
                        else
                        {
                            @categoria.Code
                        }
                    </td>
                    <td>
                        @if (categoria.IsEditing)
                        {
                            <input @bind="categoria.Description" class="form-control" />
                        }
                        else
                        {
                            @categoria.Description
                        }
                    </td>
                    <td>
                        @if (categoria.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => Save(categoria)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => Cancel(categoria)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => Edit(categoria)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(categoria.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="AddNewCategory">Add</button>
}



@code {
    private List<CategoryDto> categories;


    protected override async Task OnInitializedAsync()
    {
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Categories");
    }

    void AddNewCategory()
    {
        var novaCategoria = new CategoryDto();
        categories.Add(novaCategoria);

        Edit(novaCategoria);

        StateHasChanged();
    }

    void Edit(CategoryDto categoria)
    {
        categoria.IsEditing = true;
    }

    async Task Save(CategoryDto categoria)
    {
        if (categoria.Id == 0)
        {
            CreateCategoryDto createCategoryDto = new CreateCategoryDto();

            createCategoryDto.Id = categoria.Id;
            createCategoryDto.UserID = 1; //TODO @VS - Change user id to current user
            createCategoryDto.Code = categoria.Code;
            createCategoryDto.Description = categoria.Description;
            createCategoryDto.Subcategories = new List<SubCategoryDto>();

            var response = await Http.PostAsJsonAsync("api/Categories", createCategoryDto);
            categoria.IsEditing = false;
            StateHasChanged();
        }
        else
        {
            UpdateCategoryDto updateCategoryDto = new UpdateCategoryDto();

            updateCategoryDto.Id = categoria.Id;
            updateCategoryDto.UserID = categoria.UserId;
            updateCategoryDto.Code = categoria.Code;
            updateCategoryDto.Description = categoria.Description;
            updateCategoryDto.Subcategories = categoria.SubCategories;

            var response = await Http.PutAsJsonAsync("api/Categories/" + categoria.Id, updateCategoryDto);
            categoria.IsEditing = false;
            StateHasChanged();
        }
    }

    async Task Cancel(CategoryDto categoria)
    {
        categoria.IsEditing = false;
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Categories");
        StateHasChanged();
    }


    async Task ConfirmDelete(int categoryId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this category?" });

        if (confirmed)
        {
            await Delete(categoryId); 
        }
    }

    async Task Delete(int categoryId)
    {
        var response = await Http.DeleteAsync("api/Categories/" + categoryId);
        StateHasChanged();
        categories = await Http.GetFromJsonAsync<List<CategoryDto>>("api/Categories");
    }


} *@