@page "/earnings"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Personal Management - Earnings</PageTitle>

<br />
<br />
<h2>Earnings</h2>
<br />
@* 
@if (earnings == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Months</th>
                <th>PayDay</th>
                <th>Amount</th>
                <th>DestinationAccountOrCardCode</th>
                <th>StartDate</th>
                <th>EndDate</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var earning in earnings)
            {
                <tr>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.Code" class="form-control" />
                        }
                        else
                        {
                            @earning.Code
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.Description" class="form-control" />
                        }
                        else
                        {
                            @earning.Description
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.Months" class="form-control" />
                        }
                        else
                        {
                            @earning.Months
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.PayDay" class="form-control" />
                        }
                        else
                        {
                            @earning.PayDay
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.Amount" class="form-control" />
                        }
                        else
                        {
                            @earning.Amount
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.DestinationAccountOrCardCode" class="form-control" />
                        }
                        else
                        {
                            @earning.DestinationAccountOrCardCode
                        }
                    </td>
                    <td>
                        @earning.StartDate.ToString("dd-MM-yyyy")
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <input @bind="earning.EndDate" class="form-control" />
                        }
                        else
                        {
                            @earning.EndDate.ToString("dd-MM-yyyy")
                        }
                    </td>
                    <td>
                        @if (earning.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => Save(earning)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => Cancel(earning)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => Edit(earning)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(earning.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="AddNewEarning">Add</button>
}



@code {
    private List<EarningDto> earnings;


    protected override async Task OnInitializedAsync()
    {
        earnings = await Http.GetFromJsonAsync<List<EarningDto>>("api/Earnings");
    }

    void AddNewEarning()
    {
        var newEarning = new EarningDto();
        earnings.Add(newEarning);

        Edit(newEarning);

        StateHasChanged();
    }

    void Edit(EarningDto newEarning)
    {
        newEarning.IsEditing = true;
    }

    async Task Save(EarningDto earning)
    {
        if (earning.Id == 0)
        {
            CreateEarningDto createEarningDto = new CreateEarningDto();

            createEarningDto.Id = earning.Id;
            createEarningDto.UserId = 1; //TODO @VS - Change user id to current user
            createEarningDto.Code = earning.Code;
            createEarningDto.Description = earning.Description;
            createEarningDto.EndDate = earning.EndDate;
            createEarningDto.PayDay = earning.PayDay;
            createEarningDto.Amount = earning.Amount;
            createEarningDto.DestinationAccountOrCardCode = earning.DestinationAccountOrCardCode;
            createEarningDto.StartDate = earning.StartDate;
            createEarningDto.Months = earning.Months;

            var response = await Http.PostAsJsonAsync("api/Earnings", createEarningDto);
            earning.IsEditing = false;
            StateHasChanged();
        }
        else
        {
            UpdateEarningDto updateEarningDto = new UpdateEarningDto();

            updateEarningDto.UserId = 1; //TODO @VS - Change user id to current user
            updateEarningDto.Code = earning.Code;
            updateEarningDto.Description = earning.Description;
            updateEarningDto.EndDate = earning.EndDate;
            updateEarningDto.PayDay = earning.PayDay;
            updateEarningDto.Amount = earning.Amount;
            updateEarningDto.DestinationAccountOrCardCode = earning.DestinationAccountOrCardCode;
            updateEarningDto.StartDate = earning.StartDate;
            updateEarningDto.Months = earning.Months;

            var response = await Http.PutAsJsonAsync("api/Earnings/" + earning.Id, updateEarningDto);
            earning.IsEditing = false;
            StateHasChanged();
        }
    }

    async Task Cancel(EarningDto earningDto)
    {
        earningDto.IsEditing = false;
        earnings = await Http.GetFromJsonAsync<List<EarningDto>>("api/Earnings");
        StateHasChanged();
    }


    async Task ConfirmDelete(int earningId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this earning?" });

        if (confirmed)
        {
            await Delete(earningId);
        }
    }

    async Task Delete(int earningId)
    {
        var response = await Http.DeleteAsync("api/Earnings/" + earningId);
        StateHasChanged();
        earnings = await Http.GetFromJsonAsync<List<EarningDto>>("api/Earnings");
    }

} *@