@page "/financegoals"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Smart Finance - Finance Goals</PageTitle>

<br />
<br />
<h2>Finance goals</h2>
<br />

@if (financeGoals == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Small Description</th>
                <th>Full Description</th>
                <th>Outstanding Amount</th>
                <th>Current Debt Amoun</th>
                <th>Goal</th>
                <th>Start Goal Date</th>
                <th>End Goal Date</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var financeGoal in financeGoals)
            {
                <tr>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.Code" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.Code
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.SmallDescription" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.SmallDescription
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.FullDescription" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.FullDescription
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.OutstandingAmount" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.OutstandingAmount
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.CurrentDebtAmount" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.CurrentDebtAmount
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.Goal" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.Goal
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.StartGoalDate" class="form-control" />
                        }
                        else
                        {
                            @financeGoal.StartGoalDate.ToString("dd-MM-yyyy")
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <input @bind="financeGoal.EndGoalDate" class="form-control" />
                        }
                        else
                        {
                            @if (financeGoal.EndGoalDate.HasValue)
                            {
                                @financeGoal.EndGoalDate.Value!.ToString("dd-MM-yyyy")
                            }
                        }
                    </td>
                    <td>
                        @if (financeGoal.IsEditing)
                        {
                            <button class="btn btn-success" @onclick="() => Save(financeGoal)">Save</button>
                            <button class="btn btn-secondary" @onclick="() => Cancel(financeGoal)">Cancel</button>
                        }
                        else
                        {
                            <button class="btn btn-primary" @onclick="() => Edit(financeGoal)">Edit</button>
                            <button class="btn btn-danger" @onclick="() => ConfirmDelete(financeGoal.Id)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    <button class="btn btn-primary" @onclick="AddNewFinanceGoal">Add</button>
}

@code {
    private List<FinanceGoalDto> financeGoals;


    protected override async Task OnInitializedAsync()
    {
        financeGoals = await Http.GetFromJsonAsync<List<FinanceGoalDto>>("api/FinanceGoals");
    }

    void AddNewFinanceGoal()
    {
        var newFinanceGoal = new FinanceGoalDto();
        financeGoals.Add(newFinanceGoal);

        Edit(newFinanceGoal);

        StateHasChanged();
    }

    void Edit(FinanceGoalDto newFinanceGoal)
    {
        newFinanceGoal.IsEditing = true;
    }

    async Task Save(FinanceGoalDto financeGoal)
    {
        if (financeGoal.Id == 0)
        {
            CreateFinanceGoalDto createFinanceGoalDto = new CreateFinanceGoalDto();

            createFinanceGoalDto.Id = financeGoal.Id;
            // createEarningDto.Code = earning.Code;
            // createEarningDto.Description = earning.Description;
            // createEarningDto.EndDate = earning.EndDate;
            // createEarningDto.PayDay = earning.PayDay;
            // createEarningDto.Amount = earning.Amount;
            // createEarningDto.DestinationAccountOrCardCode = earning.DestinationAccountOrCardCode;
            // createEarningDto.StartDate = earning.StartDate;
            // createEarningDto.Months = earning.Months;

            var response = await Http.PostAsJsonAsync("api/FinanceGoals", createFinanceGoalDto);
            financeGoal.IsEditing = false;
            StateHasChanged();
        }
        else
        {
            UpdateFinanceGoalDto updateFinanceGoalDto = new UpdateFinanceGoalDto();

            // updateEarningDto.Code = earning.Code;
            // updateEarningDto.Description = earning.Description;
            // updateEarningDto.EndDate = earning.EndDate;
            // updateEarningDto.PayDay = earning.PayDay;
            // updateEarningDto.Amount = earning.Amount;
            // updateEarningDto.DestinationAccountOrCardCode = earning.DestinationAccountOrCardCode;
            // updateEarningDto.StartDate = earning.StartDate;
            // updateEarningDto.Months = earning.Months;

            var response = await Http.PutAsJsonAsync("api/FinanceGoals/" + financeGoal.Id, updateFinanceGoalDto);
            financeGoal.IsEditing = false;
            StateHasChanged();
        }
    }

    async Task Cancel(FinanceGoalDto financeGoalDto)
    {
        financeGoalDto.IsEditing = false;
        financeGoals = await Http.GetFromJsonAsync<List<FinanceGoalDto>>("api/FinanceGoals");
        StateHasChanged();
    }

    async Task ConfirmDelete(int financeGoalId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this finance goal?" });

        if (confirmed)
        {
            var response = await Http.DeleteAsync("api/FinanceGoals/" + financeGoalId);
            financeGoals = await Http.GetFromJsonAsync<List<FinanceGoalDto>>("api/FinanceGoals");
            StateHasChanged();
        }
    }
}