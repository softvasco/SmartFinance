@page "/debitcards"
@inject HttpClient Http
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender:false))

<PageTitle>Personal Management - Debit Cards</PageTitle>

<br />
<br />
<h2>Debit cards</h2>
<br />
@* 
@if (debitCards == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Code</th>
                <th>Description</th>
                <th>Balance</th>
                <th>OpenDate</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var debitCard in debitCards)
            {
                <tr>
                    <td>
                        @if (debitCard.IsEditing)
                        {
                            <input @bind="debitCard.Code" class="form-control" />
                        }
                        else
                        {
                            @debitCard.Code
                        }
                    </td>
                    <td>
                        @if (debitCard.IsEditing)
                        {
                            <input @bind="debitCard.Description" class="form-control" />
                        }
                        else
                        {
                            @debitCard.Description
                        }
                    </td>
                    <td>
                        @if (debitCard.IsEditing)
                        {
                            <input @bind="debitCard.Balance" class="form-control" />
                        }
                        else
                        {
                            @debitCard.Balance
                        }
                    </td>
                    <td>
                        @if (debitCard.IsEditing)
                        {
                            <input @bind="debitCard.OpenDate" class="form-control" />
                        }
                        else
                        {
                            @debitCard.OpenDate.ToString("dd-MM-yyyy")
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
    @* <button class="btn btn-primary" @onclick="AddNewEarning">Add</button> *@
@* } *@

@* 

@code {
    private List<DebitCardDto> debitCards = new();


    protected override async Task OnInitializedAsync()
    {
        debitCards = await Http.GetFromJsonAsync<List<DebitCardDto>>("api/DebitCards");
    }

    void AddNewEarning()
    {
        var newDebitCard = new DebitCardDto();
        debitCards.Add(newDebitCard);

        Edit(newDebitCard);

        StateHasChanged();
    }

    void Edit(DebitCardDto newDebitCard)
    {
        newDebitCard.IsEditing = true;
    }

    async Task Cancel(DebitCardDto debitCardDto)
    {
        debitCardDto.IsEditing = false;
        debitCards = await Http.GetFromJsonAsync<List<DebitCardDto>>("api/DebitCards");
        StateHasChanged();
    }


    async Task ConfirmDelete(int debitCardId)
    {
        bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm", new string[] { "Are you sure you want to delete this debit card?" });

        if (confirmed)
        {
            await Delete(debitCardId);
        }
    }

    async Task Delete(int debitCardId)
    {
        var response = await Http.DeleteAsync("api/DebitCards/" + debitCardId);
        StateHasChanged();
        debitCards = await Http.GetFromJsonAsync<List<DebitCardDto>>("api/DebitCards");
    }

}  *@